include("unbox_config_2.lua")

local p = FindMetaTable("Player")

util.AddNetworkString("ub_inventory_update")
util.AddNetworkString("ub_purchase") 
util.AddNetworkString("BeginSpin")
util.AddNetworkString("StartClientSpinAnimation")
util.AddNetworkString("SpinEnded")
util.AddNetworkString("ub_equipweapon")
util.AddNetworkString("ub_deleteItem")
util.AddNetworkString("ub_spawnEntity")
util.AddNetworkString("ub_giftitem")
util.AddNetworkString("ub_openui")
util.AddNetworkString("unboxadmin")
util.AddNetworkString("ub_admingiveitems")

local t = CurTime()

if BUC2.ShouldDropCratesAndKeys then

	BUC2.DroppableItems = {}

	for k , v in pairs(BUC2.ITEMS) do
		
		if v.canDrop == true then
			
			table.insert(BUC2.DroppableItems , k)

		end

	end

	hook.Add("Think" , "CrateDropTimer" , function()

		if CurTime() > t + (BUC2.DropTimer * 60) then
			
			t = CurTime()

			for k , v in pairs(player.GetAll()) do
			
				if BUC2.DropsAreRankLimited then
					
					--Check there rank

					local allowedDrop = false

					for a, b in pairs(BUC2.DropRankList) do
						
						if v:GetUserGroup() == b then
							
							allowedDrop = true

						end

					end

					if allowedDrop then
						
						local item = BUC2.DroppableItems[math.random(#BUC2.DroppableItems)]

						v:ub_addItem(item)
						v:ChatPrint("[UNBOXING] Congratulations "..v:Name().."! You just received one free '"..item.."'!")

					end

				else

					local item = BUC2.DroppableItems[math.random(#BUC2.DroppableItems)]

					v:ub_addItem(item)
					v:ChatPrint("[UNBOXING] Congratulations "..v:Name().."! You just received one free '"..item.."'!")

				end

			end

		end

	end)

end

net.Receive("ub_admingiveitems" , function(len , ply)

	local isAllowed = false

	for k , v in pairs(BUC2.RanksThatCanGiveItems) do
			
		if ply:GetUserGroup() == v then
			
			isAllowed = true

		end

	end

	if isAllowed then
		
		local item = net.ReadString()
		local target = net.ReadEntity()
		local amount = net.ReadInt(8)

		if BUC2.ITEMS[item] == nil then return end
		if IsValid(target) ~= true then return end
		if amount < 1 or amount > 1000 then return end

		if BUC2.ITEMS[item].itemType ~= "Money" and BUC2.ITEMS[item].itemType ~= "Points" and BUC2.ITEMS[item].itemType ~= "PSItem" and BUC2.ITEMS[item].itemType ~= "PS2Item"then

			for i = 1 , amount do

				target:ub_addItem(item)

			end

		end

		target:ChatPrint(ply:Name().." Gave you "..amount.." "..BUC2.ITEMS[item].name1.."('s)!")
		ply:ChatPrint("You gave "..target:Name().." "..amount.." "..BUC2.ITEMS[item].name1.."('s)!")

	else

		ply:ChatPrint("[UNBOXING] You do not have the permission to do that!")

	end



end)

net.Receive("ub_giftitem", function(len , ply)
 
	local itemID = net.ReadString()
	local target = net.ReadEntity()

	if BUC2.ITEMS[itemID] ~= nil and ply:ub_hasItem(itemID) then
		
		if BUC2.CanTradePermaWeapons == false and BUC2.ITEMS[itemID].permanent == true then
			
			 ply:ChatPrint("[UNBOXING] This server does not allow you to trade permanent weapons.")

			 return

		end

		if target ~= nil then
			
			ply:ub_removeItem(itemID)
			target:ub_addItem(itemID)

		end

	end


end)

net.Receive("ub_spawnEntity",function (len , ply)

	local itemID = net.ReadString()

	if ply:ub_hasItem(itemID) then

		ply:ub_removeItem(itemID)

		trace = ply:GetEyeTrace()
		posToSpawn = Vector(0,0,0)

		if trace.HitPos:Distance(ply:GetPos()) > 200 then
			
			posToSpawn = (ply:GetPos() + Vector(0,0,50)) + (ply:GetAimVector() * 100 )

		else

			posToSpawn = trace.HitPos

		end

		local temp = ents.Create(BUC2.ITEMS[itemID].entityClass)
		temp:SetPos(posToSpawn)
		temp:Spawn()

		if temp.Setowning_ent ~= nil then
			temp:Setowning_ent(ply)
		end

	end

end)

net.Receive("ub_deleteItem" , function(len, ply)

	local itemID = net.ReadString()

	if BUC2.ITEMS[itemID] == nil then print("nil") return end
	print("hey ")
	if ply:ub_hasItem(itemID) then
		print("do u haz?")
		ply:ub_removeItem(itemID)

	end

end)

net.Receive("ub_equipweapon",function(len , ply)

	local weaponID = net.ReadString()

	if BUC2.ITEMS[weaponID] == nil then return end

	if ply:ub_hasItem(weaponID) then
		
		if ply:HasWeapon(BUC2.ITEMS[weaponID].weaponName) ~= true then
			
			ply:Give(BUC2.ITEMS[weaponID].weaponName)

			if BUC2.ITEMS[weaponID].permanent == false then
				
				ply:ub_removeItem(weaponID)

			end

		end

	else

		print("[UNBOXING ERROR] Player "..ply:Name().." tried to equip a weapon the user does not own, This users may be trying to cheat.")

	end


end)

net.Receive("ub_purchase",function(len , ply)

	local item = net.ReadString()
	print(item)
	local amount = net.ReadInt(8) 

	if item ~= nil and amount ~= nil then
		
		if BUC2.ITEMS[item] == nil then return end

		if amount < 1 or amount > 16 then return end

		--Buy with DarkRP cash
		if BUC2.BuyItemsWithPoints == false and BUC2.BuyItemsWithPoints2 == false then

			if ply:canAfford(BUC2.ITEMS[item].price * amount) then
				
				ply:addMoney((BUC2.ITEMS[item].price * amount) * -1)

				for i = 1 , amount do 

					ply:ub_addItem(item)
					print(item)

				end

			end

		else --Buy with Points shop points
			if BUC2.BuyItemsWithPoints then
				if ply:PS_HasPoints(BUC2.ITEMS[item].price * amount) then
					
					ply:PS_TakePoints(BUC2.ITEMS[item].price * amount)

					for i = 1 , amount do 

						ply:ub_addItem(item)

					end

				end
			elseif BUC2.BuyItemsWithPoints2 then
				if ply.PS2_Wallet.points then				
					ply:PS2_AddStandardPoints(BUC2.ITEMS[item].price * amount * -1)
					for i = 1 , amount do 
						ply:ub_addItem(item)
					end
				end
			end

		end

	end

end)

function p:ub_addItem(itemID)

	table.insert(self.ubinv , itemID)
	print(itemID .. " item id")
	self:ub_saveInventory()
	self:ub_update_client()

end
 
function p:ub_update_client()
	--Convert from string id's to number id's
	local i = {}
	for k , v in pairs(self.ubinv) do
		table.insert(i , BUC2.ItemToID[v]) 
	end 
	print("Item Table : ")  
	PrintTable(i)
	net.Start("ub_inventory_update") 
		net.WriteTable(i)  
	net.Send(self)

end

function p:ub_removeItem(itemID)

	for k , v in pairs(self.ubinv) do
		
		if v == itemID then
		
			self.ubinv[k] = nil
			self:ub_saveInventory()
			self:ub_update_client()
			return true

		end

	end

	return false

end


function p:ub_saveInventory()

	local i = {}
	for k , v in pairs(self.ubinv) do
		table.insert(i , BUC2.ItemToID[v]) 
	end 
	file.CreateDir("blues_unboxing_2")
	file.Write("blues_unboxing_2/"..self:SteamID64().."_inventory.txt" , util.TableToJSON(i))
	--self:SetPData("UB_INV_IDS",util.TableToJSON(i))
	return true
end

function p:ub_loadInventory()
	local filename = "blues_unboxing_2/"..self:SteamID64().."_inventory.txt"
	if not file.Exists(filename , "DATA") then
 		self.ubinv = {} 
		self:ub_saveInventory()
	else 
		local i = util.JSONToTable(file.Read("blues_unboxing_2/"..self:SteamID64().."_inventory.txt", "DATA")) 
		self.ubinv = {}
		for k , v in pairs(i) do
			table.insert(self.ubinv , BUC2.IDToItem[v]) 
		end 
	end
	--[[
	local data = self:GetPData("UB_INV_IDS",-1)
	if data == -1 then 
		self.ubinv = {}
		self:ub_saveInventory()
	else
		local i = util.JSONToTable(data) 
		self.ubinv = {}
		for k , v in pairs(i) do
			table.insert(self.ubinv , BUC2.IDToItem[v]) 
		end 
	end
	]]--
end

function p:ub_hasItem(itemID)

	for k , v in pairs(self.ubinv) do
		
		if v == itemID then
			
			return true

		end

	end

	return false

end

local function GiveItemByPrintName( ply, printName )
        local itemClass = Pointshop2.GetItemClassByPrintName( printName )
        if not itemClass then
                error( "Invalid item " .. tostring( printName ) )
        end
        return ply:PS2_EasyAddItem( itemClass.className )
end

net.Receive("BeginSpin",function(len, ply)


	local crateID = net.ReadString()

	if BUC2.ITEMS[crateID] == nil or BUC2.ITEMS[crateID].itemType ~= "Crate"  and ply.spinPending == false then
		print("[UNBOXING] "..ply:Name().." sent a bad request. This could just be a mistake but he may be trying to cheat.")
		return
	end

	if ply:ub_hasItem(crateID) and ply:ub_hasItem(BUC2.ITEMS[crateID].requiredKey) then
	
		if ply:ub_removeItem(crateID) ~= true then 
			print("[UNBOXING] "..ply:Nick().." sent a bad request. This could just be a mistake but he may be trying to cheat.")
			return 
		end
		if ply:ub_removeItem(BUC2.ITEMS[crateID].requiredKey) ~= true then 
			print("[UNBOXING] "..ply:Nick().." sent a bad request. This could just be a mistake but he may be trying to cheat.")
			return 
		end

		ply.ubpendingitem = generateItem(crateID)
		ply.spinPending = true

		print("Should get "..ply.ubpendingitem)
		net.Start("StartClientSpinAnimation")
			net.WriteString(ply.ubpendingitem)
		net.Send(ply)

	else
			print("[UNBOXING] "..ply:Nick().." sent a bad request. This could just be a mistake but he may be trying to cheat.")
	end

end)

net.Receive("SpinEnded" , function(len , ply)

	if ply.spinPending == true then

		ply.spinPending = false
		if BUC2.ITEMS[ply.ubpendingitem].itemType == "Weapon" then
			ply:ub_addItem(ply.ubpendingitem)
		elseif BUC2.ITEMS[ply.ubpendingitem].itemType == "Money" then
			ply:addMoney(BUC2.ITEMS[ply.ubpendingitem].amount)
		elseif BUC2.ITEMS[ply.ubpendingitem].itemType == "PSItem" then 
			ply:PS_GiveItem(BUC2.ITEMS[ply.ubpendingitem].itemClass)
		elseif BUC2.ITEMS[ply.ubpendingitem].itemType == "PS2Item" then 
			GiveItemByPrintName(ply, BUC2.ITEMS[ply.ubpendingitem].itemClass)
		elseif BUC2.ITEMS[ply.ubpendingitem].itemType == "Points" then
			ply:PS_GivePoints(BUC2.ITEMS[ply.ubpendingitem].amount)
		elseif BUC2.ITEMS[ply.ubpendingitem].itemType == "Points2" then
			ply:PS2_AddStandardPoints(BUC2.ITEMS[ply.ubpendingitem].amount)
		elseif BUC2.ITEMS[ply.ubpendingitem].itemType == "Entity" then
			ply:ub_addItem(ply.ubpendingitem)
		end

	end

end)

hook.Add("PlayerSpawn" , "LoadUBPlayerInventory" , function(ply)

	ply:ub_loadInventory()

end)



function generateItem(itemID)

	local totalChance = 0

	for k , v in pairs(BUC2.ITEMS[itemID].items) do
		
			v = BUC2.ITEMS[v]

			totalChance = totalChance + v.chance

	end

	local itemList = {}
		
	local num = math.random(1 , totalChance)

	local prevCheck = 0
	local curCheck = 0

	local item = nil

	for k ,v in pairs(BUC2.ITEMS[itemID].items) do
		
		v = BUC2.ITEMS[v]

		if v.itemType ~= "Key" and v.itemType ~= "Crate" then

			if num >= prevCheck and num <= prevCheck + v.chance then
				

				item = v.name1

			end

			prevCheck = prevCheck + v.chance

		end

	end

	return item
 
end


hook.Add("PlayerSay" , "OpenTextCommand" , function(ply , text)

	if string.lower(text) == "!unbox" or string.lower(text) == "/unbox" then

		ply:ub_update_client()

		net.Start("ub_openui")
		net.Send(ply)

	end

	if string.lower(text) == "!unboxadmin" or string.lower(text) == "/unbox" then
		
		net.Start("unboxadmin")
		net.Send(ply)

	end

end) 



--FastDL stuff
resource.AddFile( "materials/bu2/case.png" )
resource.AddFile( "materials/bu2/dialog_background.png" )
resource.AddFile( "materials/bu2/inventory_background.png" )
resource.AddFile( "materials/bu2/item_banner.png" )
resource.AddFile( "materials/bu2/item_shadow.png" )
resource.AddFile( "materials/bu2/key.png" )
resource.AddFile( "materials/bu2/money.png" )
resource.AddFile( "materials/bu2/points.png" )
resource.AddFile( "materials/bu2/spin_bg.png" )
resource.AddFile( "materials/bu2/spin_glass.png" )
resource.AddFile( "sound/ub_tick.wav" )
resource.AddFile( "resource/fonts/oss.ttf" )

